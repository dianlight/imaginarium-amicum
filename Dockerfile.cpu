# Dockerfile.cpu

# --- Stage 1: Build the Go application and Go bindings for llama.cpp and stable-diffusion.cpp ---
FROM golang:1.22-bookworm AS builder

# Argument to pass GPU layers value at build time
ARG GPU_LAYERS=0 # Default to CPU (0 layers)

# Install build dependencies required by llama.cpp and stable-diffusion.cpp
# These include essential build tools, Git for cloning, and various image processing libraries.
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    libstdc++-12-dev \
    libgl1-mesa-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libwebp-dev \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the Makefile into the build context
COPY Makefile .

# Build the bindings using the Makefile target
# BUILD_TYPE is 'cpu' for default CPU compilation
RUN make build-bindings-for-docker BUILD_TYPE=cpu CGO_LDFLAGS=""

# Copy the Go application source code into the builder stage
COPY . .

# Build the Go application executable
# CGO_ENABLED=1 is crucial for Go to link with C/C++ libraries.
# LIBRARY_PATH and C_INCLUDE_PATH tell the Go compiler where to find the static libraries (.a)
# and their corresponding header files for CGO.
# Pass GPU_LAYERS via ldflags
ENV LIBRARY_PATH=/app/binding/go-llama.cpp:/app/binding/go-sd.cpp
ENV C_INCLUDE_PATH=/app/binding/go-llama.cpp:/app/binding/go-sd.cpp
RUN CGO_LDFLAGS="-L${LIBRARY_PATH}" CGO_ENABLED=1 go build -o main -ldflags="-X main.gpuLayersStr=${GPU_LAYERS}" .

# --- Stage 2: Create the final lightweight runtime image ---
# Use a minimal Debian image for the final stage to keep the image size down.
FROM debian:bookworm-slim

# Install runtime dependencies for the C++ components (needed even if statically linked sometimes)
# libgl1-mesa-glx for OpenGL (stable-diffusion.cpp might use it for certain operations).
# libjpeg-turbo8, libpng16-16, libtiff5, libwebp6 for image processing.
RUN apt-get update && apt-get install -y \
    wget \
    libstdc++6 \
    libgl1-mesa-glx \
    libjpeg-turbo8 \
    libpng16-16 \
    libtiff5 \
    libwebp6 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy the built Go application executable from the builder stage
COPY --from=builder /app/main .
# Copy the static frontend files
COPY --from=builder /app/web web/
# Although statically linked, copying the .a files ensures they are present in the final image,
# which can sometimes prevent issues, though primarily used during build.
COPY --from=builder /app/binding/go-llama.cpp/libbinding.a /app/libbinding_llama.a
COPY --from=builder /app/binding/go-sd.cpp/libbinding.a /app/libbinding_sd.a

# Expose the port where the Go application will listen
EXPOSE 8080

# Define the command to run the application when the container starts
CMD ["/app/main"]

