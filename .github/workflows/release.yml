# .github/workflows/release.yml

name: Build and Publish Release

permissions:
  contents: write
  statuses: write

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**' # Don't trigger on workflow file changes themselves
    # Trigger only if commit message starts with "Release "
    # This uses a basic check; for more robust regex, consider a separate step.
    # Note: `if:` conditions for `on:push` are tricky, safer to filter in a job.
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # --- Step 1: Get Release Version and Check for Existence ---
  get-release-version:
    name: Get Release Version & Check Existence
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.set_tag.outputs.release_tag }} # Expose the determined tag

    steps:
      - name: Checkout code (needed for gh cli and context)
        uses: actions/checkout@v4

      - name: Set release tag from push commit message
        id: set_tag_push
        if: github.event_name == 'push'
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          # Regex to extract version like v1.0.0 from "Release v1.0.0"
          if [[ "$COMMIT_MESSAGE" =~ ^Release\ (v[0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            RELEASE_TAG="${BASH_REMATCH[1]}"
            echo "Determined release tag from commit message: $RELEASE_TAG"
            echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"
          else
            echo "Commit message does not match 'Release <version>' pattern."
            exit 1 # Fail if message doesn't match
          fi

      - name: Set release tag from workflow_dispatch input
        id: set_tag_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          RELEASE_TAG="${{ github.event.inputs.version }}"
          echo "Determined release tag from workflow_dispatch input: $RELEASE_TAG"
          echo "release_tag=$RELEASE_TAG" >> "$GITHUB_OUTPUT"

      - name: Consolidate tag for subsequent steps
        id: set_tag
        run: |
          # Use the tag from push, or dispatch, prioritizing dispatch if both could be present (unlikely with this setup)
          FINAL_TAG="${{ steps.set_tag_push.outputs.release_tag || steps.set_tag_dispatch.outputs.release_tag }}"
          echo "FINAL_TAG=$FINAL_TAG"
          echo "release_tag=$FINAL_TAG" >> "$GITHUB_OUTPUT"

      - name: Check if release already exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.set_tag.outputs.release_tag }}"
          echo "Checking if release '$TAG_NAME' already exists..."
          # `gh release view` exits with non-zero if release doesn't exist
          if gh release view "$TAG_NAME" &> /dev/null; then
            echo "Error: Release '$TAG_NAME' already exists. Aborting workflow."
            exit 1 # Fail the job if release exists
          else
            echo "Release '$TAG_NAME' does not exist. Proceeding with builds."
          fi

  # --- Build Jobs (now depend on get-release-version) ---
  build-linux-cpu:
    name: Build Linux (CPU)
    runs-on: ubuntu-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Build for Linux (CPU)
        run: make build-linux-cpu

      - name: Upload Linux CPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-linux-cpu
          path: main_linux_amd64
          if-no-files-found: error

  # --- Linux NVIDIA GPU Build ---
  build-linux-nvidia:
    name: Build Linux (NVIDIA GPU)
    if: false
    runs-on: ubuntu-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Install NVIDIA CUDA Toolkit (Example - may vary based on runner)
        run: |
          sudo apt-get update
          echo "Please ensure CUDA Toolkit is available on your runner for GPU builds."
        continue-on-error: true

      - name: Build for Linux (NVIDIA GPU)
        run: make build-linux-nvidia

      - name: Upload Linux NVIDIA GPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-linux-nvidia
          path: main_linux_nvidia
          if-no-files-found: error

  # --- Linux AMD GPU Build ---
  build-linux-ati:
    name: Build Linux (AMD GPU)
    if: false
    runs-on: ubuntu-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Install AMD ROCm Toolkit (Example - highly specialized)
        run: |
          wget https://repo.radeon.com/amdgpu-install/6.4.2/ubuntu/noble/amdgpu-install_6.4.60402-1_all.deb
          sudo apt install ./amdgpu-install_6.4.60402-1_all.deb
          sudo apt update
          sudo apt install python3-setuptools python3-wheel
          sudo usermod -a -G render,video $LOGNAME # Add the current user to the render and video groups
          sudo apt install rocm          
        continue-on-error: false

      - name: Build for Linux (AMD GPU)
        run: make build-linux-ati

      - name: Upload Linux AMD GPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-linux-ati
          path: main_linux_ati
          if-no-files-found: error

  # --- macOS Apple Silicon (Metal) Build ---
  build-macos-apple:
    name: Build macOS (Apple Silicon/Metal)
    runs-on: macos-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Build for macOS (Apple Silicon/Metal)
        run: make build-macos-apple

      - name: Upload macOS Apple Silicon Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-macos-apple
          path: main_macos_arm64
          if-no-files-found: error

  # --- Windows CPU Build ---
  build-windows-cpu:
    name: Build Windows (CPU)
    if: false
    runs-on: windows-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Build for Windows (CPU)
        run: make build-windows-cpu

      - name: Upload Windows CPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-windows-cpu
          path: main_windows_amd64.exe
          if-no-files-found: error

  # --- Windows NVIDIA GPU Build ---
  build-windows-nvidia:
    name: Build Windows (NVIDIA GPU)
    if: false
    runs-on: windows-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Setup MSYS2 (for GNU Make and other tools on Windows)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: make git go 

      - name: Install NVIDIA CUDA Toolkit on Windows (Example - very complex for hosted runners)
        run: |
          echo "Please ensure CUDA Toolkit is available on your runner for GPU builds on Windows."
        continue-on-error: true

      - name: Build for Windows (NVIDIA GPU)
        shell: msys2 {0}
        run: make build-windows-nvidia

      - name: Upload Windows NVIDIA GPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-windows-nvidia
          path: main_windows_nvidia.exe
          if-no-files-found: error

  # --- Windows AMD GPU Build ---
  build-windows-ati:
    name: Build Windows (AMD GPU)
    if: false
    runs-on: windows-latest
    needs: get-release-version # Depends on the version determination and existence check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache go-llama.cpp binding
        uses: actions/cache@v4
        with:
          path: binding/go-llama.cpp
          key: ${{ runner.os }}-llama-binding-${{ hashFiles('binding/go-llama.cpp/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-llama-binding-

      - name: Setup MSYS2 (for GNU Make and other tools on Windows)
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: make git go

      - name: Install AMD ROCm Toolkit on Windows (Example - highly experimental for hosted runners)
        run: |
          echo "Please ensure ROCm Toolkit is available on your runner for AMD GPU builds on Windows."
        continue-on-error: true

      - name: Build for Windows (AMD GPU)
        shell: msys2 {0}
        run: make build-windows-ati

      - name: Upload Windows AMD GPU Artifact
        uses: actions/upload-artifact@v4
        with:
          name: imaginarium-amicum-windows-ati
          path: main_windows_ati.exe
          if-no-files-found: error

  # --- Final Job: Publish Release ---
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs:
      - get-release-version
      - build-linux-cpu
      #- build-linux-nvidia
      #- build-linux-ati
      - build-macos-apple
      #- build-windows-cpu
      #- build-windows-nvidia
      #- build-windows-ati
    if: success() # Only run this job if ALL preceding jobs passed

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release tag from previous job
        id: get_tag
        run: echo "RELEASE_TAG=${{ needs.get-release-version.outputs.release_tag }}" >> $GITHUB_ENV

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release_artifacts

      - name: List downloaded artifacts (for verification)
        run: ls -R ./release_artifacts

      - name: Create release and attach artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ env.RELEASE_TAG }}
        run: |
          echo "Creating GitHub release '$RELEASE_TAG'..."
          gh release create "$RELEASE_TAG" \
            --title "$RELEASE_TAG" \
            --notes "Automated release for $RELEASE_TAG built by GitHub Actions."

          echo "Attaching artifacts to release '$RELEASE_TAG'..."
          for artifact_dir in ./release_artifacts/*/; do
            ARTIFACT_NAME=$(basename "$artifact_dir")
            echo "Processing artifact: $ARTIFACT_NAME"
            find "$artifact_dir" -type f -print0 | xargs -0 -I {} gh release upload "$RELEASE_TAG" {} --clobber
          done
